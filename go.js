// Generated by CoffeeScript 1.7.1
var GoGame;

GoGame = (function() {
  var Images;

  GoGame.prototype.canvas = null;

  GoGame.prototype.drawingContext = null;

  GoGame.prototype.images = null;

  GoGame.prototype.board = null;

  GoGame.prototype.mousePosition = null;

  GoGame.prototype.cellSize = 20;

  GoGame.prototype.boardSize = 19;

  GoGame.prototype.FPS = 30;

  Images = {
    INERSECTION: 'int',
    TOPLEFT: 'tl',
    TOPRIGHT: 'tr',
    BOTTOMLEFT: 'bl',
    BOTTOMRIGHT: 'br',
    TOP: 't',
    RIGHT: 'r',
    BOTTOM: 'b',
    LEFT: 'l',
    BLACK: 'black',
    WHITE: 'white'
  };

  function GoGame() {
    this.initCanvasAndContext();
    this.initBoard();
    this.loadImagesAndDraw();
  }

  GoGame.prototype.initCanvasAndContext = function() {
    this.canvas = document.createElement('canvas');
    this.canvas.height = this.cellSize * this.boardSize;
    this.canvas.width = this.canvas.height;
    this.drawingContext = this.canvas.getContext('2d');
    document.body.appendChild(this.canvas);
    return this.canvas.onmousemove = (function(_this) {
      return function(e) {
        if (e.offsetX) {
          return _this.mousePosition = {
            x: Math.floor(e.offsetX / _this.cellSize) * _this.cellSize,
            y: Math.floor(e.offsetY / _this.cellSize) * _this.cellSize
          };
        } else if (e.layerX) {
          return _this.mousePosition = {
            x: Math.floor(e.layerX / _this.cellSize) * _this.cellSize,
            y: Math.floor(e.layerY / _this.cellSize) * _this.cellSize
          };
        }
      };
    })(this);
  };

  GoGame.prototype.initBoard = function() {
    var col, row, _i, _ref, _results;
    this.board = [];
    _results = [];
    for (row = _i = 0, _ref = this.boardSize; 0 <= _ref ? _i < _ref : _i > _ref; row = 0 <= _ref ? ++_i : --_i) {
      this.board[row] = [];
      _results.push((function() {
        var _j, _ref1, _results1;
        _results1 = [];
        for (col = _j = 0, _ref1 = this.boardSize; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; col = 0 <= _ref1 ? ++_j : --_j) {
          _results1.push(this.board[row][col] = this.createCell(row, col));
        }
        return _results1;
      }).call(this));
    }
    return _results;
  };

  GoGame.prototype.createCell = function(row, col) {
    return {
      piece: null,
      row: row,
      col: col,
      x: col * this.cellSize,
      y: row * this.cellSize
    };
  };

  GoGame.prototype.loadImagesAndDraw = function() {
    var imagesLoadedCount, k, v, _ref;
    this.images = [];
    this.images[Images.TOP] = new Image();
    this.images[Images.RIGHT] = new Image();
    this.images[Images.BOTTOM] = new Image();
    this.images[Images.LEFT] = new Image();
    this.images[Images.TOPRIGHT] = new Image();
    this.images[Images.TOPLEFT] = new Image();
    this.images[Images.BOTTOMRIGHT] = new Image();
    this.images[Images.BOTTOMLEFT] = new Image();
    this.images[Images.INERSECTION] = new Image();
    this.images[Images.BLACK] = new Image();
    this.images[Images.WHITE] = new Image();
    imagesLoadedCount = 0;
    _ref = this.images;
    for (k in _ref) {
      v = _ref[k];
      imagesLoadedCount++;
      v.onload = (function(_this) {
        return function() {
          imagesLoadedCount--;
          if (imagesLoadedCount === 0) {
            return _this.draw();
          }
        };
      })(this);
    }
    this.images[Images.TOP].src = 'img/topEdge.png';
    this.images[Images.RIGHT].src = 'img/rightEdge.png';
    this.images[Images.BOTTOM].src = 'img/bottomEdge.png';
    this.images[Images.LEFT].src = 'img/leftEdge.png';
    this.images[Images.TOPRIGHT].src = 'img/topRight.png';
    this.images[Images.TOPLEFT].src = 'img/topLeft.png';
    this.images[Images.BOTTOMRIGHT].src = 'img/bottomRight.png';
    this.images[Images.BOTTOMLEFT].src = 'img/bottomLeft.png';
    this.images[Images.INERSECTION].src = 'img/intersection.png';
    this.images[Images.BLACK].src = 'img/black.png';
    return this.images[Images.WHITE].src = 'img/white.png';
  };

  GoGame.prototype.draw = function() {
    var col, fillStyle, row, _i, _j, _ref, _ref1;
    fillStyle = 'rgb(195, 142, 72)';
    this.drawingContext.fillStyle = fillStyle;
    this.drawingContext.fillRect(0, 0, this.canvas.width, this.canvas.height);
    for (row = _i = 0, _ref = this.boardSize; 0 <= _ref ? _i < _ref : _i > _ref; row = 0 <= _ref ? ++_i : --_i) {
      for (col = _j = 0, _ref1 = this.boardSize; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; col = 0 <= _ref1 ? ++_j : --_j) {
        this.drawCell(this.board[row][col]);
      }
    }
    if (this.mousePosition) {
      this.drawingContext.drawImage(this.images[Images.BLACK], this.mousePosition.x, this.mousePosition.y, this.cellSize, this.cellSize);
    }
    return setTimeout(((function(_this) {
      return function() {
        return _this.draw();
      };
    })(this)), 1000 / this.FPS);
  };

  GoGame.prototype.drawCell = function(cell) {
    var img;
    if (cell.row === 0 && cell.col === 0) {
      img = this.images[Images.TOPLEFT];
    } else if (cell.row === 0 && cell.col === this.boardSize - 1) {
      img = this.images[Images.TOPRIGHT];
    } else if (cell.row === this.boardSize - 1 && cell.col === 0) {
      img = this.images[Images.BOTTOMLEFT];
    } else if (cell.row === this.boardSize - 1 && cell.col === this.boardSize - 1) {
      img = this.images[Images.BOTTOMRIGHT];
    } else if (cell.row === 0) {
      img = this.images[Images.TOP];
    } else if (cell.row === this.boardSize - 1) {
      img = this.images[Images.BOTTOM];
    } else if (cell.col === 0) {
      img = this.images[Images.LEFT];
    } else if (cell.col === this.boardSize - 1) {
      img = this.images[Images.RIGHT];
    } else {
      img = this.images[Images.INERSECTION];
    }
    return this.drawingContext.drawImage(img, cell.x, cell.y, this.cellSize, this.cellSize);
  };

  return GoGame;

})();

window.onload = function() {
  return new GoGame();
};
